{"version":3,"sources":["components/DayNumber/DayNumber.js","App.js","serviceWorker.js","index.js"],"names":["DayNumber","useState","day","setDay","date","setDate","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","useEffect","parsedCount","Number","localStorage","getItem","setItem","className","onClick","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQA+CeA,MA3Cf,WAAsB,IAAD,EACKC,mBAAS,GADd,mBACVC,EADU,KACLC,EADK,OAEOF,mBAAS,IAFhB,mBAEVG,EAFU,KAEJC,EAFI,KAGbC,EAAQ,IAAIC,KACZC,EAAKC,OAAOH,EAAMI,WAAWC,SAAS,EAAG,KACzCC,EAAKH,OAAOH,EAAMO,WAAa,GAAGF,SAAS,EAAG,KAC9CG,EAAOR,EAAMS,cAkBjB,OAhBAT,EAAQM,EAAK,IAAMJ,EAAK,IAAMM,EAE9BE,qBAAU,WACNX,EAAQC,KACT,IAEHU,qBAAU,WACN,IAAMC,EAAcC,OAAOC,aAAaC,QAAQ,QAAU,GAC1DjB,EAAOc,KACN,IAELD,qBAAU,WACNG,aAAaE,QAAQ,MAAOnB,KAC3B,CAACA,IAIF,yBAAKoB,UAAU,aACX,wBAAIA,UAAU,QAAd,iBAAmC,8BAAOlB,IAC1C,6BACA,+CAAoB,8BAAOF,IAC3B,6BACA,yBAAKoB,UAAU,QACX,4BACAA,UAAU,gBACVC,QAAS,kBAAMpB,GAAO,SAAAqB,GAAC,OAAIA,EAAI,OAF/B,QAEyCtB,EAAM,EAF/C,SAGA,4BACAoB,UAAU,YACVC,QAAS,kBAAMpB,EAAO,KAFtB,UAIJ,2CAAgB,8BAAO,GAAGD,MC5BvBuB,MATf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QCIcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3b3b86be.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './DayNumber.css'\nimport CheckIcon from '@material-ui/icons/Check';\n\nfunction DayNumber() {\n    const [day, setDay] = useState(1);\n    const [date, setDate] = useState('');\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = today.getFullYear();\n\n    today = mm + '/' + dd + '/' + yyyy;\n    \n    useEffect(() => {\n        setDate(today);\n    }, []);\n\n    useEffect(() => {\n        const parsedCount = Number(localStorage.getItem(\"day\") || 0)\n        setDay(parsedCount)\n      }, [])\n\n    useEffect(() => {\n        localStorage.setItem(\"day\", day)\n      }, [day])\n    \n    \n    return (\n        <div className=\"day-count\">\n            <h2 className=\"date\">Today's Date: <span>{date}</span></h2>\n            <br />\n            <h2>Days Completed: <span>{day}</span></h2>\n            <br />            \n            <div className=\"btns\">\n                <button \n                className=\"completed-btn\"\n                onClick={() => setDay(c => c + 1)}> day {day + 1} done</button>\n                <button \n                className=\"reset-btn\"\n                onClick={() => setDay(0)}>reset</button>\n            </div>\n            <h2>Days To Go: <span>{40-day}</span></h2>\n        </div>\n    )\n}\n\nexport default DayNumber\n","import React from 'react';\nimport './App.css';\nimport Todo from './components/Todo/Todo'\nimport DayNumber from './components/DayNumber/DayNumber'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DayNumber />\n      {/* <Todo /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}